class Snake {
    field int delta;
    field SnakeBlock head;
    field SnakeBlock tail;
    field int direction;

    field int length;
    
    constructor Snake new(int x, int y) {
        let delta = 10;
        let head = SnakeBlock.new(x, y);
        let tail = SnakeBlock.new(x - delta, y);
        let length = 1;

        do head.link(tail);

        return this;
    }

    method void setDirection(int newDirection) {
        if (direction = -newDirection) {
            return;
        }
        let direction = newDirection;
        return;
    }

    method void _grow(int deltaX, int deltaY) {
        var SnakeBlock newHead;
        var int currentHeadX, currentHeadY;

        let currentHeadX = head.getX();
        let currentHeadY = head.getY();

        let newHead = SnakeBlock.new(currentHeadX + deltaX, currentHeadY + deltaY);
        do newHead.link(head);

        let head = newHead;

        let length = length + 1;

        return;
    }

    method int getLength() {
        return length;
    }

    method void grow() {
        if (direction = Direction.Up()) {
            do _grow(0, -delta);
        }

        if (direction = Direction.Down()) {
            do _grow(0, delta);
        }

        if (direction = Direction.Right()) {
            do _grow(delta, 0);
        }

        if (direction = Direction.Left()) {
            do _grow(-delta, 0);
        }

        return;
    }

    method void reduceTail() {
        var SnakeBlock newTail;

        let newTail = tail.getPrev();
        do tail.dispose();
        let tail = newTail;
        let length = length - 1;

        return;
    }

    method SnakeBlock getHead() {
        return head;
    }

    method SnakeBlock getTail() {
        return tail;
    }

    method boolean selfCrossed() {
        var SnakeBlock nextBlock;
        var int nextBlockX, nextBlockY, headX, headY;

        let headX = head.getX();
        let headY = head.getY();

        let nextBlock = head.getNext();

        while (~(nextBlock = null)) {
            let nextBlockX = nextBlock.getX();
            let nextBlockY = nextBlock.getY();

            if (nextBlockX = headX) {
                if (nextBlockY = headY) {
                    return true;
                }
            }

            let nextBlock = nextBlock.getNext();
        }

        return false;
    }
}
