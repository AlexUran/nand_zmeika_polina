class SnakeGame {

    field Snake snake;
    field SnakeGrid grid;

    field int score;
    field int level;
    field int cycle;
    // Время между циклами
    field int delay;

    constructor SnakeGame new() {

        do Random.setSeed(SnakeGame.getSeed());

        let score = 0;
        let level = 1;
        let cycle = 0;
        let delay = 100;

        // Создаем игровое поле
        let grid = SnakeGrid.new(this, 512, 256);

        // Создаем змейку
        let snake = Snake.new(this, grid.sizeX() / 2, grid.sizeY() / 2, 10, 3);
        do grid.placeFood();
        do grid.drawStatus();

        return this;

    }

    function int getSeed() {
        var int seed, key;
        let seed = 0;
        let key = 0;

        do Output.printString("Welcome to the Snake game!");
        do Output.println();
        do Output.printString("Press any key to start");
        do Output.println();
        do Output.println();
        do Output.printString("Some rules:");
        do Output.println();
        do Output.printString("1. Use arrows to move the snake");
        do Output.println();
        do Output.printString("2. When a snake eats an apple - it grows");
        do Output.println();
        do Output.printString("3. If you crash into the wall or into part of the snake - the game will end");
        do Output.println();
        do Output.printString("4. If you you want to exit the game, press q");
        do Output.println();

        while(~key) {
            let seed = seed + 1;
            if( seed = 32767 ) {
                let seed = 0;
            }
            let key = Keyboard.keyPressed();
        }
        do Screen.clearScreen();
        return seed;

    }

    // Убираем игровые объекты
    method void dispose() {
        do snake.dispose();
        do grid.dispose();
        do Memory.deAlloc(this);

        return;
    }

    // Цикл игры
    method void run() {

        var boolean broken;
        var boolean exit;
        var int key;

        // Цикл игры, пока игра завершится
        let exit = false;
        while(~exit) {
            do snake.rememberDir();
            let key = Keyboard.keyPressed();
            if( key = 81 ) {
                let exit = true;
            }
            if( key = 130 ) {
                // Поворот налево (только в случае движения вверх или вниз)
                if( snake.getLastDir() = 1 ) {
                    do snake.setDir(3);
                }
                if( snake.getLastDir() = 2 ) {
                    do snake.setDir(3);
                }
            }
            if( key = 131 ) {
                // Поворот вверх, аналогично
                if( snake.getLastDir() = 3 ) {
                    do snake.setDir(1);
                }
                if( snake.getLastDir() = 4 ) {
                    do snake.setDir(1);
                }
            }
            if( key = 132 ) {
                // Поворот вправо
                if( snake.getLastDir() = 1 ) {
                    do snake.setDir(4);
                }
                if( snake.getLastDir() = 2 ) {
                    do snake.setDir(4);
                }
            }
            if( key = 133 ) {
                // Поворот вниз
                if( snake.getLastDir() = 3 ) {
                    do snake.setDir(2);
                }
                if( snake.getLastDir() = 4 ) {
                    do snake.setDir(2);
                }
            }

            // try to move one square in the current direction
            if( ~ snake.tryMove() ) {
                do grid.drawCrashed();
                do Sys.halt();
            }

            // have we eaten a food pellet?
            if( grid.checkFood(snake.posX(), snake.posY()) ) {
                do snake.eatFood();
                do nextLevel();
                do grid.placeFood();
            }

            // make the snake grow
            // takes care of drawing the new head, growing if
            // needed, and clearing the old tail if not
            do snake.grow(cycle);

            // redraw the food, status, delay and increment the cycle
            do grid.drawFood();
            do grid.drawStatus();
            do Sys.wait(delay);
            do nextCycle();

            // check if the snake's history needs to be rewritten
            if( snake.checkRewriteHistory() ) {
                let cycle = snake.getLength();
            }

        }

        do grid.drawDone();
        do Sys.halt();

        return;

    }

    // bumps the game to the next level
    method void nextLevel() {

        let score = score + (10 * level);
        let level = level + 1;
        if( delay > 30 ) {
            let delay = delay - 5;
        }

        return;
    }

    // increment the cycle count by 1
    method int nextCycle() {
        let cycle = cycle + 1;
        return cycle;
    }

    // reader methods
    method SnakeGrid getGrid() {
        return grid;
    }
    method Snake getSnake() {
        return snake;
    }
    method int getCycle() {
        return cycle;
    }
    method int getScore() {
        return score;
    }
    method int getLevel() {
        return level;
    }

}